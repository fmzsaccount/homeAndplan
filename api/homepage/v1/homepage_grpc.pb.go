// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: homepage/v1/homepage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HomepageClient is the client API for Homepage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomepageClient interface {
	GetHomepage(ctx context.Context, in *GetHomepageRequest, opts ...grpc.CallOption) (*Reply, error)
	GetHomepagePro(ctx context.Context, in *GetHomepageProRequest, opts ...grpc.CallOption) (*Reply, error)
	GetSite(ctx context.Context, in *GetSiteReq, opts ...grpc.CallOption) (*Reply, error)
	ListSearch(ctx context.Context, in *ListSearchRequest, opts ...grpc.CallOption) (*Reply, error)
	SetSearch(ctx context.Context, in *SetSearchRequest, opts ...grpc.CallOption) (*Reply, error)
	DelSearch(ctx context.Context, in *DelSearchRequest, opts ...grpc.CallOption) (*Reply, error)
}

type homepageClient struct {
	cc grpc.ClientConnInterface
}

func NewHomepageClient(cc grpc.ClientConnInterface) HomepageClient {
	return &homepageClient{cc}
}

func (c *homepageClient) GetHomepage(ctx context.Context, in *GetHomepageRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.homepage.v1.Homepage/GetHomepage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homepageClient) GetHomepagePro(ctx context.Context, in *GetHomepageProRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.homepage.v1.Homepage/GetHomepagePro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homepageClient) GetSite(ctx context.Context, in *GetSiteReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.homepage.v1.Homepage/GetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homepageClient) ListSearch(ctx context.Context, in *ListSearchRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.homepage.v1.Homepage/ListSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homepageClient) SetSearch(ctx context.Context, in *SetSearchRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.homepage.v1.Homepage/SetSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homepageClient) DelSearch(ctx context.Context, in *DelSearchRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/api.homepage.v1.Homepage/DelSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomepageServer is the server API for Homepage service.
// All implementations must embed UnimplementedHomepageServer
// for forward compatibility
type HomepageServer interface {
	GetHomepage(context.Context, *GetHomepageRequest) (*Reply, error)
	GetHomepagePro(context.Context, *GetHomepageProRequest) (*Reply, error)
	GetSite(context.Context, *GetSiteReq) (*Reply, error)
	ListSearch(context.Context, *ListSearchRequest) (*Reply, error)
	SetSearch(context.Context, *SetSearchRequest) (*Reply, error)
	DelSearch(context.Context, *DelSearchRequest) (*Reply, error)
	mustEmbedUnimplementedHomepageServer()
}

// UnimplementedHomepageServer must be embedded to have forward compatible implementations.
type UnimplementedHomepageServer struct {
}

func (UnimplementedHomepageServer) GetHomepage(context.Context, *GetHomepageRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomepage not implemented")
}
func (UnimplementedHomepageServer) GetHomepagePro(context.Context, *GetHomepageProRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomepagePro not implemented")
}
func (UnimplementedHomepageServer) GetSite(context.Context, *GetSiteReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSite not implemented")
}
func (UnimplementedHomepageServer) ListSearch(context.Context, *ListSearchRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearch not implemented")
}
func (UnimplementedHomepageServer) SetSearch(context.Context, *SetSearchRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSearch not implemented")
}
func (UnimplementedHomepageServer) DelSearch(context.Context, *DelSearchRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSearch not implemented")
}
func (UnimplementedHomepageServer) mustEmbedUnimplementedHomepageServer() {}

// UnsafeHomepageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomepageServer will
// result in compilation errors.
type UnsafeHomepageServer interface {
	mustEmbedUnimplementedHomepageServer()
}

func RegisterHomepageServer(s grpc.ServiceRegistrar, srv HomepageServer) {
	s.RegisterService(&Homepage_ServiceDesc, srv)
}

func _Homepage_GetHomepage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomepageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServer).GetHomepage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.homepage.v1.Homepage/GetHomepage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServer).GetHomepage(ctx, req.(*GetHomepageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Homepage_GetHomepagePro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomepageProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServer).GetHomepagePro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.homepage.v1.Homepage/GetHomepagePro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServer).GetHomepagePro(ctx, req.(*GetHomepageProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Homepage_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.homepage.v1.Homepage/GetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServer).GetSite(ctx, req.(*GetSiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Homepage_ListSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServer).ListSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.homepage.v1.Homepage/ListSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServer).ListSearch(ctx, req.(*ListSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Homepage_SetSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServer).SetSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.homepage.v1.Homepage/SetSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServer).SetSearch(ctx, req.(*SetSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Homepage_DelSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServer).DelSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.homepage.v1.Homepage/DelSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServer).DelSearch(ctx, req.(*DelSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Homepage_ServiceDesc is the grpc.ServiceDesc for Homepage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Homepage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.homepage.v1.Homepage",
	HandlerType: (*HomepageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHomepage",
			Handler:    _Homepage_GetHomepage_Handler,
		},
		{
			MethodName: "GetHomepagePro",
			Handler:    _Homepage_GetHomepagePro_Handler,
		},
		{
			MethodName: "GetSite",
			Handler:    _Homepage_GetSite_Handler,
		},
		{
			MethodName: "ListSearch",
			Handler:    _Homepage_ListSearch_Handler,
		},
		{
			MethodName: "SetSearch",
			Handler:    _Homepage_SetSearch_Handler,
		},
		{
			MethodName: "DelSearch",
			Handler:    _Homepage_DelSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "homepage/v1/homepage.proto",
}
