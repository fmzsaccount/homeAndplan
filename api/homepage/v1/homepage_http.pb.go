// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.2
// - protoc             v3.21.7
// source: homepage/v1/homepage.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHomepageDelSearch = "/api.homepage.v1.Homepage/DelSearch"
const OperationHomepageGetHomepage = "/api.homepage.v1.Homepage/GetHomepage"
const OperationHomepageGetHomepagePro = "/api.homepage.v1.Homepage/GetHomepagePro"
const OperationHomepageGetSite = "/api.homepage.v1.Homepage/GetSite"
const OperationHomepageListSearch = "/api.homepage.v1.Homepage/ListSearch"
const OperationHomepageSetSearch = "/api.homepage.v1.Homepage/SetSearch"

type HomepageHTTPServer interface {
	DelSearch(context.Context, *DelSearchRequest) (*Reply, error)
	GetHomepage(context.Context, *GetHomepageRequest) (*Reply, error)
	GetHomepagePro(context.Context, *GetHomepageProRequest) (*Reply, error)
	GetSite(context.Context, *GetSiteReq) (*Reply, error)
	ListSearch(context.Context, *ListSearchRequest) (*Reply, error)
	SetSearch(context.Context, *SetSearchRequest) (*Reply, error)
}

func RegisterHomepageHTTPServer(s *http.Server, srv HomepageHTTPServer) {
	r := s.Route("/")
	r.GET("/greeyun/fmz-home/homepage", _Homepage_GetHomepage0_HTTP_Handler(srv))
	r.GET("/greeyun/fmz-home/homepage/productandservice", _Homepage_GetHomepagePro0_HTTP_Handler(srv))
	r.GET("greeyun/fmz-home/site", _Homepage_GetSite0_HTTP_Handler(srv))
	r.GET("/greeyun/fmz-home/homepage/listsearch/{type}", _Homepage_ListSearch0_HTTP_Handler(srv))
	r.POST("/greeyun/fmz-home/homepage/setsearch", _Homepage_SetSearch0_HTTP_Handler(srv))
	r.DELETE("/greeyun/fmz-home/homepage/Delsearch/{isdelete}", _Homepage_DelSearch0_HTTP_Handler(srv))
}

func _Homepage_GetHomepage0_HTTP_Handler(srv HomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHomepageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomepageGetHomepage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHomepage(ctx, req.(*GetHomepageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

func _Homepage_GetHomepagePro0_HTTP_Handler(srv HomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHomepageProRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomepageGetHomepagePro)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHomepagePro(ctx, req.(*GetHomepageProRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

func _Homepage_GetSite0_HTTP_Handler(srv HomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSiteReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomepageGetSite)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSite(ctx, req.(*GetSiteReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

func _Homepage_ListSearch0_HTTP_Handler(srv HomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSearchRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomepageListSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSearch(ctx, req.(*ListSearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

func _Homepage_SetSearch0_HTTP_Handler(srv HomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetSearchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomepageSetSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetSearch(ctx, req.(*SetSearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

func _Homepage_DelSearch0_HTTP_Handler(srv HomepageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelSearchRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHomepageDelSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelSearch(ctx, req.(*DelSearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

type HomepageHTTPClient interface {
	DelSearch(ctx context.Context, req *DelSearchRequest, opts ...http.CallOption) (rsp *Reply, err error)
	GetHomepage(ctx context.Context, req *GetHomepageRequest, opts ...http.CallOption) (rsp *Reply, err error)
	GetHomepagePro(ctx context.Context, req *GetHomepageProRequest, opts ...http.CallOption) (rsp *Reply, err error)
	GetSite(ctx context.Context, req *GetSiteReq, opts ...http.CallOption) (rsp *Reply, err error)
	ListSearch(ctx context.Context, req *ListSearchRequest, opts ...http.CallOption) (rsp *Reply, err error)
	SetSearch(ctx context.Context, req *SetSearchRequest, opts ...http.CallOption) (rsp *Reply, err error)
}

type HomepageHTTPClientImpl struct {
	cc *http.Client
}

func NewHomepageHTTPClient(client *http.Client) HomepageHTTPClient {
	return &HomepageHTTPClientImpl{client}
}

func (c *HomepageHTTPClientImpl) DelSearch(ctx context.Context, in *DelSearchRequest, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/greeyun/fmz-home/homepage/Delsearch/{isdelete}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHomepageDelSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HomepageHTTPClientImpl) GetHomepage(ctx context.Context, in *GetHomepageRequest, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/greeyun/fmz-home/homepage"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHomepageGetHomepage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HomepageHTTPClientImpl) GetHomepagePro(ctx context.Context, in *GetHomepageProRequest, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/greeyun/fmz-home/homepage/productandservice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHomepageGetHomepagePro))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HomepageHTTPClientImpl) GetSite(ctx context.Context, in *GetSiteReq, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "greeyun/fmz-home/site"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHomepageGetSite))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HomepageHTTPClientImpl) ListSearch(ctx context.Context, in *ListSearchRequest, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/greeyun/fmz-home/homepage/listsearch/{type}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHomepageListSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HomepageHTTPClientImpl) SetSearch(ctx context.Context, in *SetSearchRequest, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/greeyun/fmz-home/homepage/setsearch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHomepageSetSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
