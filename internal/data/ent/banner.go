// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gy_home/internal/data/ent/banner"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Banner is the model entity for the Banner schema.
type Banner struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort int32 `json:"sort,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// LinkID holds the value of the "link_id" field.
	LinkID string `json:"link_id,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Banner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case banner.FieldID, banner.FieldSort, banner.FieldStatus:
			values[i] = new(sql.NullInt64)
		case banner.FieldURL, banner.FieldTitle, banner.FieldType, banner.FieldLinkID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Banner", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Banner fields.
func (b *Banner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case banner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int32(value.Int64)
		case banner.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				b.URL = value.String
			}
		case banner.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				b.Sort = int32(value.Int64)
			}
		case banner.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case banner.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				b.Type = value.String
			}
		case banner.FieldLinkID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_id", values[i])
			} else if value.Valid {
				b.LinkID = value.String
			}
		case banner.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Banner.
// Note that you need to call Banner.Unwrap() before calling this method if this Banner
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Banner) Update() *BannerUpdateOne {
	return (&BannerClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Banner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Banner) Unwrap() *Banner {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Banner is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Banner) String() string {
	var builder strings.Builder
	builder.WriteString("Banner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("url=")
	builder.WriteString(b.URL)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", b.Sort))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(b.Type)
	builder.WriteString(", ")
	builder.WriteString("link_id=")
	builder.WriteString(b.LinkID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", b.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Banners is a parsable slice of Banner.
type Banners []*Banner

func (b Banners) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
