// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gy_home/internal/data/ent/banner"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerCreate is the builder for creating a Banner entity.
type BannerCreate struct {
	config
	mutation *BannerMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (bc *BannerCreate) SetURL(s string) *BannerCreate {
	bc.mutation.SetURL(s)
	return bc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (bc *BannerCreate) SetNillableURL(s *string) *BannerCreate {
	if s != nil {
		bc.SetURL(*s)
	}
	return bc
}

// SetSort sets the "sort" field.
func (bc *BannerCreate) SetSort(i int32) *BannerCreate {
	bc.mutation.SetSort(i)
	return bc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (bc *BannerCreate) SetNillableSort(i *int32) *BannerCreate {
	if i != nil {
		bc.SetSort(*i)
	}
	return bc
}

// SetTitle sets the "title" field.
func (bc *BannerCreate) SetTitle(s string) *BannerCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bc *BannerCreate) SetNillableTitle(s *string) *BannerCreate {
	if s != nil {
		bc.SetTitle(*s)
	}
	return bc
}

// SetType sets the "type" field.
func (bc *BannerCreate) SetType(s string) *BannerCreate {
	bc.mutation.SetType(s)
	return bc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bc *BannerCreate) SetNillableType(s *string) *BannerCreate {
	if s != nil {
		bc.SetType(*s)
	}
	return bc
}

// SetLinkID sets the "link_id" field.
func (bc *BannerCreate) SetLinkID(s string) *BannerCreate {
	bc.mutation.SetLinkID(s)
	return bc
}

// SetNillableLinkID sets the "link_id" field if the given value is not nil.
func (bc *BannerCreate) SetNillableLinkID(s *string) *BannerCreate {
	if s != nil {
		bc.SetLinkID(*s)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BannerCreate) SetStatus(i int) *BannerCreate {
	bc.mutation.SetStatus(i)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BannerCreate) SetNillableStatus(i *int) *BannerCreate {
	if i != nil {
		bc.SetStatus(*i)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BannerCreate) SetID(i int32) *BannerCreate {
	bc.mutation.SetID(i)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BannerCreate) SetNillableID(i *int32) *BannerCreate {
	if i != nil {
		bc.SetID(*i)
	}
	return bc
}

// Mutation returns the BannerMutation object of the builder.
func (bc *BannerCreate) Mutation() *BannerMutation {
	return bc.mutation
}

// Save creates the Banner in the database.
func (bc *BannerCreate) Save(ctx context.Context) (*Banner, error) {
	var (
		err  error
		node *Banner
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BannerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Banner)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BannerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BannerCreate) SaveX(ctx context.Context) *Banner {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BannerCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BannerCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BannerCreate) defaults() {
	if _, ok := bc.mutation.URL(); !ok {
		v := banner.DefaultURL
		bc.mutation.SetURL(v)
	}
	if _, ok := bc.mutation.Sort(); !ok {
		v := banner.DefaultSort
		bc.mutation.SetSort(v)
	}
	if _, ok := bc.mutation.Title(); !ok {
		v := banner.DefaultTitle
		bc.mutation.SetTitle(v)
	}
	if _, ok := bc.mutation.GetType(); !ok {
		v := banner.DefaultType
		bc.mutation.SetType(v)
	}
	if _, ok := bc.mutation.LinkID(); !ok {
		v := banner.DefaultLinkID
		bc.mutation.SetLinkID(v)
	}
	if _, ok := bc.mutation.Status(); !ok {
		v := banner.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := banner.DefaultID
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BannerCreate) check() error {
	if _, ok := bc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Banner.url"`)}
	}
	if _, ok := bc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Banner.sort"`)}
	}
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Banner.title"`)}
	}
	if _, ok := bc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Banner.type"`)}
	}
	if _, ok := bc.mutation.LinkID(); !ok {
		return &ValidationError{Name: "link_id", err: errors.New(`ent: missing required field "Banner.link_id"`)}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Banner.status"`)}
	}
	return nil
}

func (bc *BannerCreate) sqlSave(ctx context.Context) (*Banner, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (bc *BannerCreate) createSpec() (*Banner, *sqlgraph.CreateSpec) {
	var (
		_node = &Banner{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: banner.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: banner.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.URL(); ok {
		_spec.SetField(banner.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := bc.mutation.Sort(); ok {
		_spec.SetField(banner.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := bc.mutation.Title(); ok {
		_spec.SetField(banner.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.SetField(banner.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := bc.mutation.LinkID(); ok {
		_spec.SetField(banner.FieldLinkID, field.TypeString, value)
		_node.LinkID = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// BannerCreateBulk is the builder for creating many Banner entities in bulk.
type BannerCreateBulk struct {
	config
	builders []*BannerCreate
}

// Save creates the Banner entities in the database.
func (bcb *BannerCreateBulk) Save(ctx context.Context) ([]*Banner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Banner, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BannerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BannerCreateBulk) SaveX(ctx context.Context) []*Banner {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BannerCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BannerCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
