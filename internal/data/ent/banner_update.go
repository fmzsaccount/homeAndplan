// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gy_home/internal/data/ent/banner"
	"gy_home/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BannerUpdate is the builder for updating Banner entities.
type BannerUpdate struct {
	config
	hooks    []Hook
	mutation *BannerMutation
}

// Where appends a list predicates to the BannerUpdate builder.
func (bu *BannerUpdate) Where(ps ...predicate.Banner) *BannerUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetURL sets the "url" field.
func (bu *BannerUpdate) SetURL(s string) *BannerUpdate {
	bu.mutation.SetURL(s)
	return bu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableURL(s *string) *BannerUpdate {
	if s != nil {
		bu.SetURL(*s)
	}
	return bu
}

// SetSort sets the "sort" field.
func (bu *BannerUpdate) SetSort(i int32) *BannerUpdate {
	bu.mutation.ResetSort()
	bu.mutation.SetSort(i)
	return bu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableSort(i *int32) *BannerUpdate {
	if i != nil {
		bu.SetSort(*i)
	}
	return bu
}

// AddSort adds i to the "sort" field.
func (bu *BannerUpdate) AddSort(i int32) *BannerUpdate {
	bu.mutation.AddSort(i)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BannerUpdate) SetTitle(s string) *BannerUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableTitle(s *string) *BannerUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetType sets the "type" field.
func (bu *BannerUpdate) SetType(s string) *BannerUpdate {
	bu.mutation.SetType(s)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableType(s *string) *BannerUpdate {
	if s != nil {
		bu.SetType(*s)
	}
	return bu
}

// SetLinkID sets the "link_id" field.
func (bu *BannerUpdate) SetLinkID(s string) *BannerUpdate {
	bu.mutation.SetLinkID(s)
	return bu
}

// SetNillableLinkID sets the "link_id" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableLinkID(s *string) *BannerUpdate {
	if s != nil {
		bu.SetLinkID(*s)
	}
	return bu
}

// SetStatus sets the "status" field.
func (bu *BannerUpdate) SetStatus(i int) *BannerUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(i)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BannerUpdate) SetNillableStatus(i *int) *BannerUpdate {
	if i != nil {
		bu.SetStatus(*i)
	}
	return bu
}

// AddStatus adds i to the "status" field.
func (bu *BannerUpdate) AddStatus(i int) *BannerUpdate {
	bu.mutation.AddStatus(i)
	return bu
}

// Mutation returns the BannerMutation object of the builder.
func (bu *BannerUpdate) Mutation() *BannerMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BannerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BannerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BannerUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BannerUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BannerUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BannerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   banner.Table,
			Columns: banner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: banner.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.URL(); ok {
		_spec.SetField(banner.FieldURL, field.TypeString, value)
	}
	if value, ok := bu.mutation.Sort(); ok {
		_spec.SetField(banner.FieldSort, field.TypeInt32, value)
	}
	if value, ok := bu.mutation.AddedSort(); ok {
		_spec.AddField(banner.FieldSort, field.TypeInt32, value)
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(banner.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(banner.FieldType, field.TypeString, value)
	}
	if value, ok := bu.mutation.LinkID(); ok {
		_spec.SetField(banner.FieldLinkID, field.TypeString, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.AddField(banner.FieldStatus, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BannerUpdateOne is the builder for updating a single Banner entity.
type BannerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BannerMutation
}

// SetURL sets the "url" field.
func (buo *BannerUpdateOne) SetURL(s string) *BannerUpdateOne {
	buo.mutation.SetURL(s)
	return buo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableURL(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetURL(*s)
	}
	return buo
}

// SetSort sets the "sort" field.
func (buo *BannerUpdateOne) SetSort(i int32) *BannerUpdateOne {
	buo.mutation.ResetSort()
	buo.mutation.SetSort(i)
	return buo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableSort(i *int32) *BannerUpdateOne {
	if i != nil {
		buo.SetSort(*i)
	}
	return buo
}

// AddSort adds i to the "sort" field.
func (buo *BannerUpdateOne) AddSort(i int32) *BannerUpdateOne {
	buo.mutation.AddSort(i)
	return buo
}

// SetTitle sets the "title" field.
func (buo *BannerUpdateOne) SetTitle(s string) *BannerUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableTitle(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetType sets the "type" field.
func (buo *BannerUpdateOne) SetType(s string) *BannerUpdateOne {
	buo.mutation.SetType(s)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableType(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetType(*s)
	}
	return buo
}

// SetLinkID sets the "link_id" field.
func (buo *BannerUpdateOne) SetLinkID(s string) *BannerUpdateOne {
	buo.mutation.SetLinkID(s)
	return buo
}

// SetNillableLinkID sets the "link_id" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableLinkID(s *string) *BannerUpdateOne {
	if s != nil {
		buo.SetLinkID(*s)
	}
	return buo
}

// SetStatus sets the "status" field.
func (buo *BannerUpdateOne) SetStatus(i int) *BannerUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(i)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BannerUpdateOne) SetNillableStatus(i *int) *BannerUpdateOne {
	if i != nil {
		buo.SetStatus(*i)
	}
	return buo
}

// AddStatus adds i to the "status" field.
func (buo *BannerUpdateOne) AddStatus(i int) *BannerUpdateOne {
	buo.mutation.AddStatus(i)
	return buo
}

// Mutation returns the BannerMutation object of the builder.
func (buo *BannerUpdateOne) Mutation() *BannerMutation {
	return buo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BannerUpdateOne) Select(field string, fields ...string) *BannerUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Banner entity.
func (buo *BannerUpdateOne) Save(ctx context.Context) (*Banner, error) {
	var (
		err  error
		node *Banner
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BannerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Banner)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BannerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BannerUpdateOne) SaveX(ctx context.Context) *Banner {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BannerUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BannerUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BannerUpdateOne) sqlSave(ctx context.Context) (_node *Banner, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   banner.Table,
			Columns: banner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: banner.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Banner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banner.FieldID)
		for _, f := range fields {
			if !banner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != banner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.URL(); ok {
		_spec.SetField(banner.FieldURL, field.TypeString, value)
	}
	if value, ok := buo.mutation.Sort(); ok {
		_spec.SetField(banner.FieldSort, field.TypeInt32, value)
	}
	if value, ok := buo.mutation.AddedSort(); ok {
		_spec.AddField(banner.FieldSort, field.TypeInt32, value)
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(banner.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(banner.FieldType, field.TypeString, value)
	}
	if value, ok := buo.mutation.LinkID(); ok {
		_spec.SetField(banner.FieldLinkID, field.TypeString, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(banner.FieldStatus, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.AddField(banner.FieldStatus, field.TypeInt, value)
	}
	_node = &Banner{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
