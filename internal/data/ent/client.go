// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"gy_home/internal/data/ent/migrate"

	"gy_home/internal/data/ent/banner"
	"gy_home/internal/data/ent/plan"
	"gy_home/internal/data/ent/plancategory"
	"gy_home/internal/data/ent/product"
	"gy_home/internal/data/ent/productcategory"
	"gy_home/internal/data/ent/site"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Banner is the client for interacting with the Banner builders.
	Banner *BannerClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// PlanCategory is the client for interacting with the PlanCategory builders.
	PlanCategory *PlanCategoryClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductCategory is the client for interacting with the ProductCategory builders.
	ProductCategory *ProductCategoryClient
	// Site is the client for interacting with the Site builders.
	Site *SiteClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Banner = NewBannerClient(c.config)
	c.Plan = NewPlanClient(c.config)
	c.PlanCategory = NewPlanCategoryClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductCategory = NewProductCategoryClient(c.config)
	c.Site = NewSiteClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Banner:          NewBannerClient(cfg),
		Plan:            NewPlanClient(cfg),
		PlanCategory:    NewPlanCategoryClient(cfg),
		Product:         NewProductClient(cfg),
		ProductCategory: NewProductCategoryClient(cfg),
		Site:            NewSiteClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Banner:          NewBannerClient(cfg),
		Plan:            NewPlanClient(cfg),
		PlanCategory:    NewPlanCategoryClient(cfg),
		Product:         NewProductClient(cfg),
		ProductCategory: NewProductCategoryClient(cfg),
		Site:            NewSiteClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Banner.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Banner.Use(hooks...)
	c.Plan.Use(hooks...)
	c.PlanCategory.Use(hooks...)
	c.Product.Use(hooks...)
	c.ProductCategory.Use(hooks...)
	c.Site.Use(hooks...)
}

// BannerClient is a client for the Banner schema.
type BannerClient struct {
	config
}

// NewBannerClient returns a client for the Banner from the given config.
func NewBannerClient(c config) *BannerClient {
	return &BannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `banner.Hooks(f(g(h())))`.
func (c *BannerClient) Use(hooks ...Hook) {
	c.hooks.Banner = append(c.hooks.Banner, hooks...)
}

// Create returns a builder for creating a Banner entity.
func (c *BannerClient) Create() *BannerCreate {
	mutation := newBannerMutation(c.config, OpCreate)
	return &BannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Banner entities.
func (c *BannerClient) CreateBulk(builders ...*BannerCreate) *BannerCreateBulk {
	return &BannerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Banner.
func (c *BannerClient) Update() *BannerUpdate {
	mutation := newBannerMutation(c.config, OpUpdate)
	return &BannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BannerClient) UpdateOne(b *Banner) *BannerUpdateOne {
	mutation := newBannerMutation(c.config, OpUpdateOne, withBanner(b))
	return &BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BannerClient) UpdateOneID(id int32) *BannerUpdateOne {
	mutation := newBannerMutation(c.config, OpUpdateOne, withBannerID(id))
	return &BannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Banner.
func (c *BannerClient) Delete() *BannerDelete {
	mutation := newBannerMutation(c.config, OpDelete)
	return &BannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BannerClient) DeleteOne(b *Banner) *BannerDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BannerClient) DeleteOneID(id int32) *BannerDeleteOne {
	builder := c.Delete().Where(banner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BannerDeleteOne{builder}
}

// Query returns a query builder for Banner.
func (c *BannerClient) Query() *BannerQuery {
	return &BannerQuery{
		config: c.config,
	}
}

// Get returns a Banner entity by its id.
func (c *BannerClient) Get(ctx context.Context, id int32) (*Banner, error) {
	return c.Query().Where(banner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BannerClient) GetX(ctx context.Context, id int32) *Banner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BannerClient) Hooks() []Hook {
	return c.hooks.Banner
}

// PlanClient is a client for the Plan schema.
type PlanClient struct {
	config
}

// NewPlanClient returns a client for the Plan from the given config.
func NewPlanClient(c config) *PlanClient {
	return &PlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plan.Hooks(f(g(h())))`.
func (c *PlanClient) Use(hooks ...Hook) {
	c.hooks.Plan = append(c.hooks.Plan, hooks...)
}

// Create returns a builder for creating a Plan entity.
func (c *PlanClient) Create() *PlanCreate {
	mutation := newPlanMutation(c.config, OpCreate)
	return &PlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plan entities.
func (c *PlanClient) CreateBulk(builders ...*PlanCreate) *PlanCreateBulk {
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plan.
func (c *PlanClient) Update() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanClient) UpdateOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanClient) UpdateOneID(id int32) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plan.
func (c *PlanClient) Delete() *PlanDelete {
	mutation := newPlanMutation(c.config, OpDelete)
	return &PlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanClient) DeleteOne(pl *Plan) *PlanDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanClient) DeleteOneID(id int32) *PlanDeleteOne {
	builder := c.Delete().Where(plan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanDeleteOne{builder}
}

// Query returns a query builder for Plan.
func (c *PlanClient) Query() *PlanQuery {
	return &PlanQuery{
		config: c.config,
	}
}

// Get returns a Plan entity by its id.
func (c *PlanClient) Get(ctx context.Context, id int32) (*Plan, error) {
	return c.Query().Where(plan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanClient) GetX(ctx context.Context, id int32) *Plan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PlanClient) Hooks() []Hook {
	return c.hooks.Plan
}

// PlanCategoryClient is a client for the PlanCategory schema.
type PlanCategoryClient struct {
	config
}

// NewPlanCategoryClient returns a client for the PlanCategory from the given config.
func NewPlanCategoryClient(c config) *PlanCategoryClient {
	return &PlanCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plancategory.Hooks(f(g(h())))`.
func (c *PlanCategoryClient) Use(hooks ...Hook) {
	c.hooks.PlanCategory = append(c.hooks.PlanCategory, hooks...)
}

// Create returns a builder for creating a PlanCategory entity.
func (c *PlanCategoryClient) Create() *PlanCategoryCreate {
	mutation := newPlanCategoryMutation(c.config, OpCreate)
	return &PlanCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlanCategory entities.
func (c *PlanCategoryClient) CreateBulk(builders ...*PlanCategoryCreate) *PlanCategoryCreateBulk {
	return &PlanCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlanCategory.
func (c *PlanCategoryClient) Update() *PlanCategoryUpdate {
	mutation := newPlanCategoryMutation(c.config, OpUpdate)
	return &PlanCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanCategoryClient) UpdateOne(pc *PlanCategory) *PlanCategoryUpdateOne {
	mutation := newPlanCategoryMutation(c.config, OpUpdateOne, withPlanCategory(pc))
	return &PlanCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanCategoryClient) UpdateOneID(id int32) *PlanCategoryUpdateOne {
	mutation := newPlanCategoryMutation(c.config, OpUpdateOne, withPlanCategoryID(id))
	return &PlanCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlanCategory.
func (c *PlanCategoryClient) Delete() *PlanCategoryDelete {
	mutation := newPlanCategoryMutation(c.config, OpDelete)
	return &PlanCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanCategoryClient) DeleteOne(pc *PlanCategory) *PlanCategoryDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanCategoryClient) DeleteOneID(id int32) *PlanCategoryDeleteOne {
	builder := c.Delete().Where(plancategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanCategoryDeleteOne{builder}
}

// Query returns a query builder for PlanCategory.
func (c *PlanCategoryClient) Query() *PlanCategoryQuery {
	return &PlanCategoryQuery{
		config: c.config,
	}
}

// Get returns a PlanCategory entity by its id.
func (c *PlanCategoryClient) Get(ctx context.Context, id int32) (*PlanCategory, error) {
	return c.Query().Where(plancategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanCategoryClient) GetX(ctx context.Context, id int32) *PlanCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PlanCategoryClient) Hooks() []Hook {
	return c.hooks.PlanCategory
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int32) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int32) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int32) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int32) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentID queries the parent_id edge of a Product.
func (c *ProductClient) QueryParentID(pr *Product) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.ParentIDTable, product.ParentIDColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// ProductCategoryClient is a client for the ProductCategory schema.
type ProductCategoryClient struct {
	config
}

// NewProductCategoryClient returns a client for the ProductCategory from the given config.
func NewProductCategoryClient(c config) *ProductCategoryClient {
	return &ProductCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategory.Hooks(f(g(h())))`.
func (c *ProductCategoryClient) Use(hooks ...Hook) {
	c.hooks.ProductCategory = append(c.hooks.ProductCategory, hooks...)
}

// Create returns a builder for creating a ProductCategory entity.
func (c *ProductCategoryClient) Create() *ProductCategoryCreate {
	mutation := newProductCategoryMutation(c.config, OpCreate)
	return &ProductCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategory entities.
func (c *ProductCategoryClient) CreateBulk(builders ...*ProductCategoryCreate) *ProductCategoryCreateBulk {
	return &ProductCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategory.
func (c *ProductCategoryClient) Update() *ProductCategoryUpdate {
	mutation := newProductCategoryMutation(c.config, OpUpdate)
	return &ProductCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryClient) UpdateOne(pc *ProductCategory) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategory(pc))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryClient) UpdateOneID(id int32) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategoryID(id))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategory.
func (c *ProductCategoryClient) Delete() *ProductCategoryDelete {
	mutation := newProductCategoryMutation(c.config, OpDelete)
	return &ProductCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductCategoryClient) DeleteOne(pc *ProductCategory) *ProductCategoryDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductCategoryClient) DeleteOneID(id int32) *ProductCategoryDeleteOne {
	builder := c.Delete().Where(productcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryDeleteOne{builder}
}

// Query returns a query builder for ProductCategory.
func (c *ProductCategoryClient) Query() *ProductCategoryQuery {
	return &ProductCategoryQuery{
		config: c.config,
	}
}

// Get returns a ProductCategory entity by its id.
func (c *ProductCategoryClient) Get(ctx context.Context, id int32) (*ProductCategory, error) {
	return c.Query().Where(productcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryClient) GetX(ctx context.Context, id int32) *ProductCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a ProductCategory.
func (c *ProductCategoryClient) QueryParent(pc *ProductCategory) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcategory.ParentTable, productcategory.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a ProductCategory.
func (c *ProductCategoryClient) QueryChildren(pc *ProductCategory) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategory.ChildrenTable, productcategory.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a ProductCategory.
func (c *ProductCategoryClient) QueryProducts(pc *ProductCategory) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategory.ProductsTable, productcategory.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryClient) Hooks() []Hook {
	return c.hooks.ProductCategory
}

// SiteClient is a client for the Site schema.
type SiteClient struct {
	config
}

// NewSiteClient returns a client for the Site from the given config.
func NewSiteClient(c config) *SiteClient {
	return &SiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `site.Hooks(f(g(h())))`.
func (c *SiteClient) Use(hooks ...Hook) {
	c.hooks.Site = append(c.hooks.Site, hooks...)
}

// Create returns a builder for creating a Site entity.
func (c *SiteClient) Create() *SiteCreate {
	mutation := newSiteMutation(c.config, OpCreate)
	return &SiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Site entities.
func (c *SiteClient) CreateBulk(builders ...*SiteCreate) *SiteCreateBulk {
	return &SiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Site.
func (c *SiteClient) Update() *SiteUpdate {
	mutation := newSiteMutation(c.config, OpUpdate)
	return &SiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SiteClient) UpdateOne(s *Site) *SiteUpdateOne {
	mutation := newSiteMutation(c.config, OpUpdateOne, withSite(s))
	return &SiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SiteClient) UpdateOneID(id int32) *SiteUpdateOne {
	mutation := newSiteMutation(c.config, OpUpdateOne, withSiteID(id))
	return &SiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Site.
func (c *SiteClient) Delete() *SiteDelete {
	mutation := newSiteMutation(c.config, OpDelete)
	return &SiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SiteClient) DeleteOne(s *Site) *SiteDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SiteClient) DeleteOneID(id int32) *SiteDeleteOne {
	builder := c.Delete().Where(site.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SiteDeleteOne{builder}
}

// Query returns a query builder for Site.
func (c *SiteClient) Query() *SiteQuery {
	return &SiteQuery{
		config: c.config,
	}
}

// Get returns a Site entity by its id.
func (c *SiteClient) Get(ctx context.Context, id int32) (*Site, error) {
	return c.Query().Where(site.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SiteClient) GetX(ctx context.Context, id int32) *Site {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SiteClient) Hooks() []Hook {
	return c.hooks.Site
}
