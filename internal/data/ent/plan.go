// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gy_home/internal/data/ent/plan"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Recommend holds the value of the "recommend" field.
	Recommend int `json:"recommend,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int32 `json:"category_id,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Utime holds the value of the "utime" field.
	Utime time.Time `json:"utime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plan.FieldID, plan.FieldRecommend, plan.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case plan.FieldCategory, plan.FieldName, plan.FieldURL:
			values[i] = new(sql.NullString)
		case plan.FieldUtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Plan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int32(value.Int64)
		case plan.FieldRecommend:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recommend", values[i])
			} else if value.Valid {
				pl.Recommend = int(value.Int64)
			}
		case plan.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				pl.CategoryID = int32(value.Int64)
			}
		case plan.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pl.Category = value.String
			}
		case plan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plan.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pl.URL = value.String
			}
		case plan.FieldUtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field utime", values[i])
			} else if value.Valid {
				pl.Utime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Plan.
// Note that you need to call Plan.Unwrap() before calling this method if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return (&PlanClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Plan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("recommend=")
	builder.WriteString(fmt.Sprintf("%v", pl.Recommend))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pl.Category)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pl.URL)
	builder.WriteString(", ")
	builder.WriteString("utime=")
	builder.WriteString(pl.Utime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Plans is a parsable slice of Plan.
type Plans []*Plan

func (pl Plans) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
