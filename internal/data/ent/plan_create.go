// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gy_home/internal/data/ent/plan"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
}

// SetRecommend sets the "recommend" field.
func (pc *PlanCreate) SetRecommend(i int) *PlanCreate {
	pc.mutation.SetRecommend(i)
	return pc
}

// SetNillableRecommend sets the "recommend" field if the given value is not nil.
func (pc *PlanCreate) SetNillableRecommend(i *int) *PlanCreate {
	if i != nil {
		pc.SetRecommend(*i)
	}
	return pc
}

// SetCategoryID sets the "category_id" field.
func (pc *PlanCreate) SetCategoryID(i int32) *PlanCreate {
	pc.mutation.SetCategoryID(i)
	return pc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCategoryID(i *int32) *PlanCreate {
	if i != nil {
		pc.SetCategoryID(*i)
	}
	return pc
}

// SetCategory sets the "category" field.
func (pc *PlanCreate) SetCategory(s string) *PlanCreate {
	pc.mutation.SetCategory(s)
	return pc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCategory(s *string) *PlanCreate {
	if s != nil {
		pc.SetCategory(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PlanCreate) SetName(s string) *PlanCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *PlanCreate) SetNillableName(s *string) *PlanCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetURL sets the "url" field.
func (pc *PlanCreate) SetURL(s string) *PlanCreate {
	pc.mutation.SetURL(s)
	return pc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pc *PlanCreate) SetNillableURL(s *string) *PlanCreate {
	if s != nil {
		pc.SetURL(*s)
	}
	return pc
}

// SetUtime sets the "utime" field.
func (pc *PlanCreate) SetUtime(t time.Time) *PlanCreate {
	pc.mutation.SetUtime(t)
	return pc
}

// SetID sets the "id" field.
func (pc *PlanCreate) SetID(i int32) *PlanCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PlanCreate) SetNillableID(i *int32) *PlanCreate {
	if i != nil {
		pc.SetID(*i)
	}
	return pc
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	var (
		err  error
		node *Plan
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Plan)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlanMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() {
	if _, ok := pc.mutation.Recommend(); !ok {
		v := plan.DefaultRecommend
		pc.mutation.SetRecommend(v)
	}
	if _, ok := pc.mutation.CategoryID(); !ok {
		v := plan.DefaultCategoryID
		pc.mutation.SetCategoryID(v)
	}
	if _, ok := pc.mutation.Category(); !ok {
		v := plan.DefaultCategory
		pc.mutation.SetCategory(v)
	}
	if _, ok := pc.mutation.Name(); !ok {
		v := plan.DefaultName
		pc.mutation.SetName(v)
	}
	if _, ok := pc.mutation.URL(); !ok {
		v := plan.DefaultURL
		pc.mutation.SetURL(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := plan.DefaultID
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	if _, ok := pc.mutation.Recommend(); !ok {
		return &ValidationError{Name: "recommend", err: errors.New(`ent: missing required field "Plan.recommend"`)}
	}
	if _, ok := pc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "Plan.category_id"`)}
	}
	if _, ok := pc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Plan.category"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Plan.name"`)}
	}
	if _, ok := pc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Plan.url"`)}
	}
	if _, ok := pc.mutation.Utime(); !ok {
		return &ValidationError{Name: "utime", err: errors.New(`ent: missing required field "Plan.utime"`)}
	}
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: plan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: plan.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Recommend(); ok {
		_spec.SetField(plan.FieldRecommend, field.TypeInt, value)
		_node.Recommend = value
	}
	if value, ok := pc.mutation.CategoryID(); ok {
		_spec.SetField(plan.FieldCategoryID, field.TypeInt32, value)
		_node.CategoryID = value
	}
	if value, ok := pc.mutation.Category(); ok {
		_spec.SetField(plan.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.URL(); ok {
		_spec.SetField(plan.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := pc.mutation.Utime(); ok {
		_spec.SetField(plan.FieldUtime, field.TypeTime, value)
		_node.Utime = value
	}
	return _node, _spec
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	builders []*PlanCreate
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
