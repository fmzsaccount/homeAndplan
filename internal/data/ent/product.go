// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"gy_home/internal/biz"
	"gy_home/internal/data/ent/product"
	"gy_home/internal/data/ent/productcategory"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Recommend holds the value of the "recommend" field.
	Recommend int `json:"recommend,omitempty"`
	// History holds the value of the "history" field.
	History int32 `json:"history,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int32 `json:"category_id,omitempty"`
	// CategoryName holds the value of the "category_name" field.
	CategoryName string `json:"category_name,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Utime holds the value of the "utime" field.
	Utime time.Time `json:"utime,omitempty"`
	// ServiceLink holds the value of the "service_link" field.
	ServiceLink string `json:"service_link,omitempty"`
	// ApplyLink holds the value of the "apply_link" field.
	ApplyLink string `json:"apply_link,omitempty"`
	// JSON holds the value of the "json" field.
	JSON biz.Product `json:"json,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges ProductEdges `json:"edges"`
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// ParentID holds the value of the parent_id edge.
	ParentID *ProductCategory `json:"parent_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ParentIDOrErr returns the ParentID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) ParentIDOrErr() (*ProductCategory, error) {
	if e.loadedTypes[0] {
		if e.ParentID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: productcategory.Label}
		}
		return e.ParentID, nil
	}
	return nil, &NotLoadedError{edge: "parent_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldJSON:
			values[i] = new([]byte)
		case product.FieldID, product.FieldStatus, product.FieldRecommend, product.FieldHistory, product.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case product.FieldCategoryName, product.FieldName, product.FieldContent, product.FieldServiceLink, product.FieldApplyLink:
			values[i] = new(sql.NullString)
		case product.FieldUtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int32(value.Int64)
		case product.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = int(value.Int64)
			}
		case product.FieldRecommend:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field recommend", values[i])
			} else if value.Valid {
				pr.Recommend = int(value.Int64)
			}
		case product.FieldHistory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field history", values[i])
			} else if value.Valid {
				pr.History = int32(value.Int64)
			}
		case product.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				pr.CategoryID = int32(value.Int64)
			}
		case product.FieldCategoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_name", values[i])
			} else if value.Valid {
				pr.CategoryName = value.String
			}
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pr.Content = value.String
			}
		case product.FieldUtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field utime", values[i])
			} else if value.Valid {
				pr.Utime = value.Time
			}
		case product.FieldServiceLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_link", values[i])
			} else if value.Valid {
				pr.ServiceLink = value.String
			}
		case product.FieldApplyLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field apply_link", values[i])
			} else if value.Valid {
				pr.ApplyLink = value.String
			}
		case product.FieldJSON:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field json", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.JSON); err != nil {
					return fmt.Errorf("unmarshal field json: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryParentID queries the "parent_id" edge of the Product entity.
func (pr *Product) QueryParentID() *ProductCategoryQuery {
	return (&ProductClient{config: pr.config}).QueryParentID(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("recommend=")
	builder.WriteString(fmt.Sprintf("%v", pr.Recommend))
	builder.WriteString(", ")
	builder.WriteString("history=")
	builder.WriteString(fmt.Sprintf("%v", pr.History))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("category_name=")
	builder.WriteString(pr.CategoryName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pr.Content)
	builder.WriteString(", ")
	builder.WriteString("utime=")
	builder.WriteString(pr.Utime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("service_link=")
	builder.WriteString(pr.ServiceLink)
	builder.WriteString(", ")
	builder.WriteString("apply_link=")
	builder.WriteString(pr.ApplyLink)
	builder.WriteString(", ")
	builder.WriteString("json=")
	builder.WriteString(fmt.Sprintf("%v", pr.JSON))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
