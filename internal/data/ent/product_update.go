// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gy_home/internal/biz"
	"gy_home/internal/data/ent/predicate"
	"gy_home/internal/data/ent/product"
	"gy_home/internal/data/ent/productcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProductUpdate) SetStatus(i int) *ProductUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStatus(i *int) *ProductUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *ProductUpdate) AddStatus(i int) *ProductUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetRecommend sets the "recommend" field.
func (pu *ProductUpdate) SetRecommend(i int) *ProductUpdate {
	pu.mutation.ResetRecommend()
	pu.mutation.SetRecommend(i)
	return pu
}

// SetNillableRecommend sets the "recommend" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableRecommend(i *int) *ProductUpdate {
	if i != nil {
		pu.SetRecommend(*i)
	}
	return pu
}

// AddRecommend adds i to the "recommend" field.
func (pu *ProductUpdate) AddRecommend(i int) *ProductUpdate {
	pu.mutation.AddRecommend(i)
	return pu
}

// SetHistory sets the "history" field.
func (pu *ProductUpdate) SetHistory(i int32) *ProductUpdate {
	pu.mutation.ResetHistory()
	pu.mutation.SetHistory(i)
	return pu
}

// SetNillableHistory sets the "history" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableHistory(i *int32) *ProductUpdate {
	if i != nil {
		pu.SetHistory(*i)
	}
	return pu
}

// AddHistory adds i to the "history" field.
func (pu *ProductUpdate) AddHistory(i int32) *ProductUpdate {
	pu.mutation.AddHistory(i)
	return pu
}

// SetCategoryID sets the "category_id" field.
func (pu *ProductUpdate) SetCategoryID(i int32) *ProductUpdate {
	pu.mutation.SetCategoryID(i)
	return pu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCategoryID(i *int32) *ProductUpdate {
	if i != nil {
		pu.SetCategoryID(*i)
	}
	return pu
}

// ClearCategoryID clears the value of the "category_id" field.
func (pu *ProductUpdate) ClearCategoryID() *ProductUpdate {
	pu.mutation.ClearCategoryID()
	return pu
}

// SetCategoryName sets the "category_name" field.
func (pu *ProductUpdate) SetCategoryName(s string) *ProductUpdate {
	pu.mutation.SetCategoryName(s)
	return pu
}

// SetNillableCategoryName sets the "category_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCategoryName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetCategoryName(*s)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetContent sets the "content" field.
func (pu *ProductUpdate) SetContent(s string) *ProductUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableContent(s *string) *ProductUpdate {
	if s != nil {
		pu.SetContent(*s)
	}
	return pu
}

// SetUtime sets the "utime" field.
func (pu *ProductUpdate) SetUtime(t time.Time) *ProductUpdate {
	pu.mutation.SetUtime(t)
	return pu
}

// SetServiceLink sets the "service_link" field.
func (pu *ProductUpdate) SetServiceLink(s string) *ProductUpdate {
	pu.mutation.SetServiceLink(s)
	return pu
}

// SetNillableServiceLink sets the "service_link" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableServiceLink(s *string) *ProductUpdate {
	if s != nil {
		pu.SetServiceLink(*s)
	}
	return pu
}

// SetApplyLink sets the "apply_link" field.
func (pu *ProductUpdate) SetApplyLink(s string) *ProductUpdate {
	pu.mutation.SetApplyLink(s)
	return pu
}

// SetNillableApplyLink sets the "apply_link" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableApplyLink(s *string) *ProductUpdate {
	if s != nil {
		pu.SetApplyLink(*s)
	}
	return pu
}

// SetJSON sets the "json" field.
func (pu *ProductUpdate) SetJSON(b biz.Product) *ProductUpdate {
	pu.mutation.SetJSON(b)
	return pu
}

// SetParentIDID sets the "parent_id" edge to the ProductCategory entity by ID.
func (pu *ProductUpdate) SetParentIDID(id int32) *ProductUpdate {
	pu.mutation.SetParentIDID(id)
	return pu
}

// SetNillableParentIDID sets the "parent_id" edge to the ProductCategory entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableParentIDID(id *int32) *ProductUpdate {
	if id != nil {
		pu = pu.SetParentIDID(*id)
	}
	return pu
}

// SetParentID sets the "parent_id" edge to the ProductCategory entity.
func (pu *ProductUpdate) SetParentID(p *ProductCategory) *ProductUpdate {
	return pu.SetParentIDID(p.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearParentID clears the "parent_id" edge to the ProductCategory entity.
func (pu *ProductUpdate) ClearParentID() *ProductUpdate {
	pu.mutation.ClearParentID()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: product.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Recommend(); ok {
		_spec.SetField(product.FieldRecommend, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedRecommend(); ok {
		_spec.AddField(product.FieldRecommend, field.TypeInt, value)
	}
	if value, ok := pu.mutation.History(); ok {
		_spec.SetField(product.FieldHistory, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedHistory(); ok {
		_spec.AddField(product.FieldHistory, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.CategoryName(); ok {
		_spec.SetField(product.FieldCategoryName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(product.FieldContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.Utime(); ok {
		_spec.SetField(product.FieldUtime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.ServiceLink(); ok {
		_spec.SetField(product.FieldServiceLink, field.TypeString, value)
	}
	if value, ok := pu.mutation.ApplyLink(); ok {
		_spec.SetField(product.FieldApplyLink, field.TypeString, value)
	}
	if value, ok := pu.mutation.JSON(); ok {
		_spec.SetField(product.FieldJSON, field.TypeJSON, value)
	}
	if pu.mutation.ParentIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ParentIDTable,
			Columns: []string{product.ParentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ParentIDTable,
			Columns: []string{product.ParentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetStatus sets the "status" field.
func (puo *ProductUpdateOne) SetStatus(i int) *ProductUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStatus(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *ProductUpdateOne) AddStatus(i int) *ProductUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetRecommend sets the "recommend" field.
func (puo *ProductUpdateOne) SetRecommend(i int) *ProductUpdateOne {
	puo.mutation.ResetRecommend()
	puo.mutation.SetRecommend(i)
	return puo
}

// SetNillableRecommend sets the "recommend" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableRecommend(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetRecommend(*i)
	}
	return puo
}

// AddRecommend adds i to the "recommend" field.
func (puo *ProductUpdateOne) AddRecommend(i int) *ProductUpdateOne {
	puo.mutation.AddRecommend(i)
	return puo
}

// SetHistory sets the "history" field.
func (puo *ProductUpdateOne) SetHistory(i int32) *ProductUpdateOne {
	puo.mutation.ResetHistory()
	puo.mutation.SetHistory(i)
	return puo
}

// SetNillableHistory sets the "history" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableHistory(i *int32) *ProductUpdateOne {
	if i != nil {
		puo.SetHistory(*i)
	}
	return puo
}

// AddHistory adds i to the "history" field.
func (puo *ProductUpdateOne) AddHistory(i int32) *ProductUpdateOne {
	puo.mutation.AddHistory(i)
	return puo
}

// SetCategoryID sets the "category_id" field.
func (puo *ProductUpdateOne) SetCategoryID(i int32) *ProductUpdateOne {
	puo.mutation.SetCategoryID(i)
	return puo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCategoryID(i *int32) *ProductUpdateOne {
	if i != nil {
		puo.SetCategoryID(*i)
	}
	return puo
}

// ClearCategoryID clears the value of the "category_id" field.
func (puo *ProductUpdateOne) ClearCategoryID() *ProductUpdateOne {
	puo.mutation.ClearCategoryID()
	return puo
}

// SetCategoryName sets the "category_name" field.
func (puo *ProductUpdateOne) SetCategoryName(s string) *ProductUpdateOne {
	puo.mutation.SetCategoryName(s)
	return puo
}

// SetNillableCategoryName sets the "category_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCategoryName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetCategoryName(*s)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetContent sets the "content" field.
func (puo *ProductUpdateOne) SetContent(s string) *ProductUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableContent(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetContent(*s)
	}
	return puo
}

// SetUtime sets the "utime" field.
func (puo *ProductUpdateOne) SetUtime(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUtime(t)
	return puo
}

// SetServiceLink sets the "service_link" field.
func (puo *ProductUpdateOne) SetServiceLink(s string) *ProductUpdateOne {
	puo.mutation.SetServiceLink(s)
	return puo
}

// SetNillableServiceLink sets the "service_link" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableServiceLink(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetServiceLink(*s)
	}
	return puo
}

// SetApplyLink sets the "apply_link" field.
func (puo *ProductUpdateOne) SetApplyLink(s string) *ProductUpdateOne {
	puo.mutation.SetApplyLink(s)
	return puo
}

// SetNillableApplyLink sets the "apply_link" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableApplyLink(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetApplyLink(*s)
	}
	return puo
}

// SetJSON sets the "json" field.
func (puo *ProductUpdateOne) SetJSON(b biz.Product) *ProductUpdateOne {
	puo.mutation.SetJSON(b)
	return puo
}

// SetParentIDID sets the "parent_id" edge to the ProductCategory entity by ID.
func (puo *ProductUpdateOne) SetParentIDID(id int32) *ProductUpdateOne {
	puo.mutation.SetParentIDID(id)
	return puo
}

// SetNillableParentIDID sets the "parent_id" edge to the ProductCategory entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableParentIDID(id *int32) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetParentIDID(*id)
	}
	return puo
}

// SetParentID sets the "parent_id" edge to the ProductCategory entity.
func (puo *ProductUpdateOne) SetParentID(p *ProductCategory) *ProductUpdateOne {
	return puo.SetParentIDID(p.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearParentID clears the "parent_id" edge to the ProductCategory entity.
func (puo *ProductUpdateOne) ClearParentID() *ProductUpdateOne {
	puo.mutation.ClearParentID()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Product)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProductMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: product.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(product.FieldStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Recommend(); ok {
		_spec.SetField(product.FieldRecommend, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedRecommend(); ok {
		_spec.AddField(product.FieldRecommend, field.TypeInt, value)
	}
	if value, ok := puo.mutation.History(); ok {
		_spec.SetField(product.FieldHistory, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedHistory(); ok {
		_spec.AddField(product.FieldHistory, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.CategoryName(); ok {
		_spec.SetField(product.FieldCategoryName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(product.FieldContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.Utime(); ok {
		_spec.SetField(product.FieldUtime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.ServiceLink(); ok {
		_spec.SetField(product.FieldServiceLink, field.TypeString, value)
	}
	if value, ok := puo.mutation.ApplyLink(); ok {
		_spec.SetField(product.FieldApplyLink, field.TypeString, value)
	}
	if value, ok := puo.mutation.JSON(); ok {
		_spec.SetField(product.FieldJSON, field.TypeJSON, value)
	}
	if puo.mutation.ParentIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ParentIDTable,
			Columns: []string{product.ParentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: productcategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ParentIDTable,
			Columns: []string{product.ParentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
