// Code generated by ent, DO NOT EDIT.

package productcategory

const (
	// Label holds the string label denoting the productcategory type in the database.
	Label = "product_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// Table holds the table name of the productcategory in the database.
	Table = "product_category"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "product_category"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "product_category"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "product"
	// ProductsInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductsInverseTable = "product"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "category_id"
)

// Columns holds all SQL columns for productcategory fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldLevel,
	FieldParentID,
	FieldSort,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultLevel holds the default value on creation for the "level" field.
	DefaultLevel int32
	// DefaultParentID holds the default value on creation for the "parent_id" field.
	DefaultParentID int32
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort int32
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID int32
)
