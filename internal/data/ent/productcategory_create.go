// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gy_home/internal/data/ent/product"
	"gy_home/internal/data/ent/productcategory"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCategoryCreate is the builder for creating a ProductCategory entity.
type ProductCategoryCreate struct {
	config
	mutation *ProductCategoryMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (pcc *ProductCategoryCreate) SetStatus(i int) *ProductCategoryCreate {
	pcc.mutation.SetStatus(i)
	return pcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableStatus(i *int) *ProductCategoryCreate {
	if i != nil {
		pcc.SetStatus(*i)
	}
	return pcc
}

// SetLevel sets the "level" field.
func (pcc *ProductCategoryCreate) SetLevel(i int32) *ProductCategoryCreate {
	pcc.mutation.SetLevel(i)
	return pcc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableLevel(i *int32) *ProductCategoryCreate {
	if i != nil {
		pcc.SetLevel(*i)
	}
	return pcc
}

// SetParentID sets the "parent_id" field.
func (pcc *ProductCategoryCreate) SetParentID(i int32) *ProductCategoryCreate {
	pcc.mutation.SetParentID(i)
	return pcc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableParentID(i *int32) *ProductCategoryCreate {
	if i != nil {
		pcc.SetParentID(*i)
	}
	return pcc
}

// SetSort sets the "sort" field.
func (pcc *ProductCategoryCreate) SetSort(i int32) *ProductCategoryCreate {
	pcc.mutation.SetSort(i)
	return pcc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableSort(i *int32) *ProductCategoryCreate {
	if i != nil {
		pcc.SetSort(*i)
	}
	return pcc
}

// SetName sets the "name" field.
func (pcc *ProductCategoryCreate) SetName(s string) *ProductCategoryCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableName(s *string) *ProductCategoryCreate {
	if s != nil {
		pcc.SetName(*s)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *ProductCategoryCreate) SetID(i int32) *ProductCategoryCreate {
	pcc.mutation.SetID(i)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *ProductCategoryCreate) SetNillableID(i *int32) *ProductCategoryCreate {
	if i != nil {
		pcc.SetID(*i)
	}
	return pcc
}

// SetParent sets the "parent" edge to the ProductCategory entity.
func (pcc *ProductCategoryCreate) SetParent(p *ProductCategory) *ProductCategoryCreate {
	return pcc.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the ProductCategory entity by IDs.
func (pcc *ProductCategoryCreate) AddChildIDs(ids ...int32) *ProductCategoryCreate {
	pcc.mutation.AddChildIDs(ids...)
	return pcc
}

// AddChildren adds the "children" edges to the ProductCategory entity.
func (pcc *ProductCategoryCreate) AddChildren(p ...*ProductCategory) *ProductCategoryCreate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddChildIDs(ids...)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (pcc *ProductCategoryCreate) AddProductIDs(ids ...int32) *ProductCategoryCreate {
	pcc.mutation.AddProductIDs(ids...)
	return pcc
}

// AddProducts adds the "products" edges to the Product entity.
func (pcc *ProductCategoryCreate) AddProducts(p ...*Product) *ProductCategoryCreate {
	ids := make([]int32, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddProductIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcc *ProductCategoryCreate) Mutation() *ProductCategoryMutation {
	return pcc.mutation
}

// Save creates the ProductCategory in the database.
func (pcc *ProductCategoryCreate) Save(ctx context.Context) (*ProductCategory, error) {
	var (
		err  error
		node *ProductCategory
	)
	pcc.defaults()
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			if node, err = pcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			if pcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProductCategory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProductCategoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *ProductCategoryCreate) SaveX(ctx context.Context) *ProductCategory {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *ProductCategoryCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *ProductCategoryCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *ProductCategoryCreate) defaults() {
	if _, ok := pcc.mutation.Status(); !ok {
		v := productcategory.DefaultStatus
		pcc.mutation.SetStatus(v)
	}
	if _, ok := pcc.mutation.Level(); !ok {
		v := productcategory.DefaultLevel
		pcc.mutation.SetLevel(v)
	}
	if _, ok := pcc.mutation.ParentID(); !ok {
		v := productcategory.DefaultParentID
		pcc.mutation.SetParentID(v)
	}
	if _, ok := pcc.mutation.Sort(); !ok {
		v := productcategory.DefaultSort
		pcc.mutation.SetSort(v)
	}
	if _, ok := pcc.mutation.Name(); !ok {
		v := productcategory.DefaultName
		pcc.mutation.SetName(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := productcategory.DefaultID
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *ProductCategoryCreate) check() error {
	if _, ok := pcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProductCategory.status"`)}
	}
	if _, ok := pcc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "ProductCategory.level"`)}
	}
	if _, ok := pcc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "ProductCategory.sort"`)}
	}
	if _, ok := pcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProductCategory.name"`)}
	}
	return nil
}

func (pcc *ProductCategoryCreate) sqlSave(ctx context.Context) (*ProductCategory, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (pcc *ProductCategoryCreate) createSpec() (*ProductCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductCategory{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: productcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: productcategory.FieldID,
			},
		}
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.Status(); ok {
		_spec.SetField(productcategory.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := pcc.mutation.Level(); ok {
		_spec.SetField(productcategory.FieldLevel, field.TypeInt32, value)
		_node.Level = value
	}
	if value, ok := pcc.mutation.Sort(); ok {
		_spec.SetField(productcategory.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.SetField(productcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := pcc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productcategory.ParentTable,
			Columns: []string{productcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ChildrenTable,
			Columns: []string{productcategory.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: productcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductsTable,
			Columns: []string{productcategory.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt32,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCategoryCreateBulk is the builder for creating many ProductCategory entities in bulk.
type ProductCategoryCreateBulk struct {
	config
	builders []*ProductCategoryCreate
}

// Save creates the ProductCategory entities in the database.
func (pccb *ProductCategoryCreateBulk) Save(ctx context.Context) ([]*ProductCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*ProductCategory, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *ProductCategoryCreateBulk) SaveX(ctx context.Context) []*ProductCategory {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *ProductCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *ProductCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
