// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"gy_home/internal/data/ent/predicate"
	"gy_home/internal/data/ent/product"
	"gy_home/internal/data/ent/productcategory"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCategoryQuery is the builder for querying ProductCategory entities.
type ProductCategoryQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.ProductCategory
	withParent   *ProductCategoryQuery
	withChildren *ProductCategoryQuery
	withProducts *ProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductCategoryQuery builder.
func (pcq *ProductCategoryQuery) Where(ps ...predicate.ProductCategory) *ProductCategoryQuery {
	pcq.predicates = append(pcq.predicates, ps...)
	return pcq
}

// Limit adds a limit step to the query.
func (pcq *ProductCategoryQuery) Limit(limit int) *ProductCategoryQuery {
	pcq.limit = &limit
	return pcq
}

// Offset adds an offset step to the query.
func (pcq *ProductCategoryQuery) Offset(offset int) *ProductCategoryQuery {
	pcq.offset = &offset
	return pcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcq *ProductCategoryQuery) Unique(unique bool) *ProductCategoryQuery {
	pcq.unique = &unique
	return pcq
}

// Order adds an order step to the query.
func (pcq *ProductCategoryQuery) Order(o ...OrderFunc) *ProductCategoryQuery {
	pcq.order = append(pcq.order, o...)
	return pcq
}

// QueryParent chains the current query on the "parent" edge.
func (pcq *ProductCategoryQuery) QueryParent() *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: pcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, selector),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productcategory.ParentTable, productcategory.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (pcq *ProductCategoryQuery) QueryChildren() *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: pcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, selector),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategory.ChildrenTable, productcategory.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProducts chains the current query on the "products" edge.
func (pcq *ProductCategoryQuery) QueryProducts() *ProductQuery {
	query := &ProductQuery{config: pcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategory.ProductsTable, productcategory.ProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductCategory entity from the query.
// Returns a *NotFoundError when no ProductCategory was found.
func (pcq *ProductCategoryQuery) First(ctx context.Context) (*ProductCategory, error) {
	nodes, err := pcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcq *ProductCategoryQuery) FirstX(ctx context.Context) *ProductCategory {
	node, err := pcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductCategory ID from the query.
// Returns a *NotFoundError when no ProductCategory ID was found.
func (pcq *ProductCategoryQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = pcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcq *ProductCategoryQuery) FirstIDX(ctx context.Context) int32 {
	id, err := pcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductCategory entity is found.
// Returns a *NotFoundError when no ProductCategory entities are found.
func (pcq *ProductCategoryQuery) Only(ctx context.Context) (*ProductCategory, error) {
	nodes, err := pcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productcategory.Label}
	default:
		return nil, &NotSingularError{productcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcq *ProductCategoryQuery) OnlyX(ctx context.Context) *ProductCategory {
	node, err := pcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductCategory ID in the query.
// Returns a *NotSingularError when more than one ProductCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcq *ProductCategoryQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = pcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productcategory.Label}
	default:
		err = &NotSingularError{productcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcq *ProductCategoryQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := pcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductCategories.
func (pcq *ProductCategoryQuery) All(ctx context.Context) ([]*ProductCategory, error) {
	if err := pcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pcq *ProductCategoryQuery) AllX(ctx context.Context) []*ProductCategory {
	nodes, err := pcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductCategory IDs.
func (pcq *ProductCategoryQuery) IDs(ctx context.Context) ([]int32, error) {
	var ids []int32
	if err := pcq.Select(productcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcq *ProductCategoryQuery) IDsX(ctx context.Context) []int32 {
	ids, err := pcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcq *ProductCategoryQuery) Count(ctx context.Context) (int, error) {
	if err := pcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pcq *ProductCategoryQuery) CountX(ctx context.Context) int {
	count, err := pcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcq *ProductCategoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := pcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pcq *ProductCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := pcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcq *ProductCategoryQuery) Clone() *ProductCategoryQuery {
	if pcq == nil {
		return nil
	}
	return &ProductCategoryQuery{
		config:       pcq.config,
		limit:        pcq.limit,
		offset:       pcq.offset,
		order:        append([]OrderFunc{}, pcq.order...),
		predicates:   append([]predicate.ProductCategory{}, pcq.predicates...),
		withParent:   pcq.withParent.Clone(),
		withChildren: pcq.withChildren.Clone(),
		withProducts: pcq.withProducts.Clone(),
		// clone intermediate query.
		sql:    pcq.sql.Clone(),
		path:   pcq.path,
		unique: pcq.unique,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *ProductCategoryQuery) WithParent(opts ...func(*ProductCategoryQuery)) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: pcq.config}
	for _, opt := range opts {
		opt(query)
	}
	pcq.withParent = query
	return pcq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *ProductCategoryQuery) WithChildren(opts ...func(*ProductCategoryQuery)) *ProductCategoryQuery {
	query := &ProductCategoryQuery{config: pcq.config}
	for _, opt := range opts {
		opt(query)
	}
	pcq.withChildren = query
	return pcq
}

// WithProducts tells the query-builder to eager-load the nodes that are connected to
// the "products" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *ProductCategoryQuery) WithProducts(opts ...func(*ProductQuery)) *ProductCategoryQuery {
	query := &ProductQuery{config: pcq.config}
	for _, opt := range opts {
		opt(query)
	}
	pcq.withProducts = query
	return pcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Status int `json:"status,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductCategory.Query().
//		GroupBy(productcategory.FieldStatus).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pcq *ProductCategoryQuery) GroupBy(field string, fields ...string) *ProductCategoryGroupBy {
	grbuild := &ProductCategoryGroupBy{config: pcq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pcq.sqlQuery(ctx), nil
	}
	grbuild.label = productcategory.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Status int `json:"status,omitempty"`
//	}
//
//	client.ProductCategory.Query().
//		Select(productcategory.FieldStatus).
//		Scan(ctx, &v)
func (pcq *ProductCategoryQuery) Select(fields ...string) *ProductCategorySelect {
	pcq.fields = append(pcq.fields, fields...)
	selbuild := &ProductCategorySelect{ProductCategoryQuery: pcq}
	selbuild.label = productcategory.Label
	selbuild.flds, selbuild.scan = &pcq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ProductCategorySelect configured with the given aggregations.
func (pcq *ProductCategoryQuery) Aggregate(fns ...AggregateFunc) *ProductCategorySelect {
	return pcq.Select().Aggregate(fns...)
}

func (pcq *ProductCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pcq.fields {
		if !productcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pcq.path != nil {
		prev, err := pcq.path(ctx)
		if err != nil {
			return err
		}
		pcq.sql = prev
	}
	return nil
}

func (pcq *ProductCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductCategory, error) {
	var (
		nodes       = []*ProductCategory{}
		_spec       = pcq.querySpec()
		loadedTypes = [3]bool{
			pcq.withParent != nil,
			pcq.withChildren != nil,
			pcq.withProducts != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductCategory{config: pcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pcq.withParent; query != nil {
		if err := pcq.loadParent(ctx, query, nodes, nil,
			func(n *ProductCategory, e *ProductCategory) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withChildren; query != nil {
		if err := pcq.loadChildren(ctx, query, nodes,
			func(n *ProductCategory) { n.Edges.Children = []*ProductCategory{} },
			func(n *ProductCategory, e *ProductCategory) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := pcq.withProducts; query != nil {
		if err := pcq.loadProducts(ctx, query, nodes,
			func(n *ProductCategory) { n.Edges.Products = []*Product{} },
			func(n *ProductCategory, e *Product) { n.Edges.Products = append(n.Edges.Products, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pcq *ProductCategoryQuery) loadParent(ctx context.Context, query *ProductCategoryQuery, nodes []*ProductCategory, init func(*ProductCategory), assign func(*ProductCategory, *ProductCategory)) error {
	ids := make([]int32, 0, len(nodes))
	nodeids := make(map[int32][]*ProductCategory)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(productcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pcq *ProductCategoryQuery) loadChildren(ctx context.Context, query *ProductCategoryQuery, nodes []*ProductCategory, init func(*ProductCategory), assign func(*ProductCategory, *ProductCategory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*ProductCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.ProductCategory(func(s *sql.Selector) {
		s.Where(sql.InValues(productcategory.ChildrenColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pcq *ProductCategoryQuery) loadProducts(ctx context.Context, query *ProductQuery, nodes []*ProductCategory, init func(*ProductCategory), assign func(*ProductCategory, *Product)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int32]*ProductCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Product(func(s *sql.Selector) {
		s.Where(sql.InValues(productcategory.ProductsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CategoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "category_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pcq *ProductCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcq.querySpec()
	_spec.Node.Columns = pcq.fields
	if len(pcq.fields) > 0 {
		_spec.Unique = pcq.unique != nil && *pcq.unique
	}
	return sqlgraph.CountNodes(ctx, pcq.driver, _spec)
}

func (pcq *ProductCategoryQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := pcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (pcq *ProductCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   productcategory.Table,
			Columns: productcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: productcategory.FieldID,
			},
		},
		From:   pcq.sql,
		Unique: true,
	}
	if unique := pcq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pcq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategory.FieldID)
		for i := range fields {
			if fields[i] != productcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcq *ProductCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcq.driver.Dialect())
	t1 := builder.Table(productcategory.Table)
	columns := pcq.fields
	if len(columns) == 0 {
		columns = productcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcq.sql != nil {
		selector = pcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcq.unique != nil && *pcq.unique {
		selector.Distinct()
	}
	for _, p := range pcq.predicates {
		p(selector)
	}
	for _, p := range pcq.order {
		p(selector)
	}
	if offset := pcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductCategoryGroupBy is the group-by builder for ProductCategory entities.
type ProductCategoryGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcgb *ProductCategoryGroupBy) Aggregate(fns ...AggregateFunc) *ProductCategoryGroupBy {
	pcgb.fns = append(pcgb.fns, fns...)
	return pcgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pcgb *ProductCategoryGroupBy) Scan(ctx context.Context, v any) error {
	query, err := pcgb.path(ctx)
	if err != nil {
		return err
	}
	pcgb.sql = query
	return pcgb.sqlScan(ctx, v)
}

func (pcgb *ProductCategoryGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range pcgb.fields {
		if !productcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pcgb *ProductCategoryGroupBy) sqlQuery() *sql.Selector {
	selector := pcgb.sql.Select()
	aggregation := make([]string, 0, len(pcgb.fns))
	for _, fn := range pcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pcgb.fields)+len(pcgb.fns))
		for _, f := range pcgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pcgb.fields...)...)
}

// ProductCategorySelect is the builder for selecting fields of ProductCategory entities.
type ProductCategorySelect struct {
	*ProductCategoryQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pcs *ProductCategorySelect) Aggregate(fns ...AggregateFunc) *ProductCategorySelect {
	pcs.fns = append(pcs.fns, fns...)
	return pcs
}

// Scan applies the selector query and scans the result into the given value.
func (pcs *ProductCategorySelect) Scan(ctx context.Context, v any) error {
	if err := pcs.prepareQuery(ctx); err != nil {
		return err
	}
	pcs.sql = pcs.ProductCategoryQuery.sqlQuery(ctx)
	return pcs.sqlScan(ctx, v)
}

func (pcs *ProductCategorySelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(pcs.fns))
	for _, fn := range pcs.fns {
		aggregation = append(aggregation, fn(pcs.sql))
	}
	switch n := len(*pcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		pcs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		pcs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := pcs.sql.Query()
	if err := pcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
